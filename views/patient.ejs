<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<% var maxBar = 900; %>


<div id="addNotePopup" hidden>
    <div id="popup">
        <div id="header">
            Ajouter une note
            <i class="fa fa-close" id="closePopup" style="float: left;position:relative;left:15px;"></i>
        </div>
        <div id="form">
            <div id="from">
                <label for="fromInput">De : </label><br/>
                <input id="fromInput" type="text">
            </div>
            <div id="note">
                <label for="noteInput">Texte : </label><br/>
                <textarea id="noteInput"></textarea>
            </div>
        </div>
        <button id="addNoteConfirm">Ajouter la note</button>
    </div>
</div>

<div id="modifyUser" hidden>
    <div id="mupopup">
        <div id="muheader">
            Ajouter une note
            <i class="fa fa-close" id="muclosePopup" style="float: left;position:relative;left:15px;"></i>
        </div>
        <div id="muform">
            <div id="muNom">
                <label for="muNomInput">Nom Prénom : </label><br/>
                <input class="settingsValue" id="muNomInput" type="text" name="name">
            </div>
            <div id="muChambre">
                <label for="muChambreInput">Chambre : </label><br/>
                <input class="settingsValue" type="text" id="muChambreInput" name="chambre"/>
            </div>
            <div id="muOXYalert">
                <label for="muOXYalertInput">Profil d'alerte d'oxymetrie : </label><br/>
                <input class="settingsValue" type="number" id="muOXYalertInput" name="oxy-alert"/><div id="muOXYprofileName"></div>
            </div>
            <div id="muPULSEalert">
                <label for="muPULSEalertInput">Profil d'alert de pulsation cardiaque</label><br/>
                <input class="settingsValue" type="number" id="muPULSEalertInput" name="pulse-alert"/><div id="muPULSEprofileName"></div>
            </div>
        </div>
        <button id="modifyConfirm">Modifier ses paramètres</button>
    </div>
</div>

<div>
    <div class="header">
        <div class="back"><i class="fa fa-arrow-left" style="font-size:36px;" onclick="window.history.back()"></i></div>
        <div class="settings"><i id="settings" class="fa fa-gear" style="font-size:36px;"></i></div>
        <div class="name"><%= data.users[0].name %> - <%= data.users[0].chambre %></div>
    </div>
    <table class="main">
        <tr>
            <th class="title borderright">Alertes</th>
            <th class="title">Graphique</th>
        </tr>
        <tr>
            <th>
                <!--<div style="width: 100%;text-align: center;font-size: 3em">Alertes</div>-->
                <table class="borderright">
                    <thead>
                        <tr>
                            <th>Catégorie</th>
                            <th>Date</th>
                            <th>Gravité</th>
                        </tr>
                    </thead>
                    <tbody id="alerts-body">
                    </tbody>
                </table>
            </th>
            <th style="width:65%; height: 100%">
                <!--Graph-->
                <div style="width: 100%;height:100%"><canvas id="chart"></canvas></div>
                <label for="size">Echelle</label><input type="range" id="size" min="0" max="<%=maxBar%>" value="0" style="direction: ltr">
            </th>
        </tr>
        <tr>
            <th colspan="2" class="title bordertop">Notes<i class="fa fa-plus" id="addNote" style="float: right;position: relative;right: 5px"></i></th>
        </tr>
        <tr>
            <th colspan="2">
                <table id="message-body"> <!-- INNER CONTENT IN refresh_notes ()-->
                </table>
            </th>
        </tr>
    </table>
</div>

<style>
    .header{
        width: 100%;
        border-bottom: rgba(0, 0, 0, 1) solid 1px;
    }

    .header > .name {
        margin-left: auto;
        margin-right: auto;
        margin-bottom: 5px;
        text-align: center;
        font-size: 2.7em;
    }

    .header > .settings {
        float: right;
        position: relative;
        top: 2px;
        right: 5px;
    }

    .header > .back {
        float: left;
    }

    table {
        width: 100%;
    }

    .title {
        font-size: 3em;
    }

    .borderright {
        border-right: rgba(0, 0, 0, 1) solid 1px;
    }

    .bordertop {
        border-top: rgba(0, 0, 0, 1) solid 1px;
    }

    #size {
        width: 100%;
        -webkit-appearance: none;
        background: #d3d3d3;
        outline: none;
        opacity: 0.7;
        -webkit-transition: .2s;
        transition: opacity .2s;
    }

    #size::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 25px;
        height: 25px;
        background: #4CAF50;
        cursor: pointer;
    }

    #size::-moz-range-thumb {
        width: 25px;
        height: 25px;
        background: #4CAF50;
        cursor: pointer;
    }

    #addNotePopup {
        position: absolute;
        width: 99%;
        height: 98%;
        background-color: rgba(0, 0, 0, 0.32);
        z-index: 2;
    }

    #popup {
        width: 50%;
        height: 50%;
        background-color: white;
        position: relative;
        top: 25%;
        left: 25%;
    }

    #header {
        text-align: center;
        font-size: 2em;
        position: relative;
        top: 10px;
    }

    #form {
        position: relative;
        top: 40px;
        left: 20px;
    }

    #from {
        width: 100%;
        margin-right: 20px;
    }

    #noteInput {
        width: 80%;
        height: 50%;
    }

    #addNoteConfirm {
        float: right;
        position: relative;
        right: 5%;
        top: 20%;
    }

    #modifyUser {
        position: absolute;
        width: 99%;
        height: 98%;
        background-color: rgba(0, 0, 0, 0.32);
        z-index: 2;
    }

    #mupopup {
        width: 50%;
        height: 50%;
        background-color: white;
        position: relative;
        top: 25%;
        left: 25%;
    }

    #muheader {
        text-align: center;
        font-size: 2em;
        position: relative;
        top: 10px;
    }

    #muform {
        position: relative;
        top: 40px;
        left: 20px;
    }

    #muNom {
        width: 100%;
        margin-right: 20px;
    }

    #modifyConfirm {
        float: right;
        position: relative;
        right: 5%;
        top: 20%;
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script>
<script>
    //////////////////// DEFINE /////////////

    var colors = {}

    colors.normal = "rgba(55,210,67,0.56)"
    colors.warning = "rgba(210,176,55,0.56)"
    colors.problem = "rgba(210,55,55,0.56)"
    colors.critical = "rgba(255,0,0,0.78)"
    colors.unknown = "rgba(230,0,255,0.72)"

    colors.background1 = "rgba(142,142,142,0.42)"
    colors.background2 = "rgba(224,224,224,0.57)"

    <%var nbase = 100;%>

    /////////////////////////////////////////

    document.getElementById("addNote").onclick = () => {
        document.getElementById("addNotePopup").hidden = false;
    }

    document.getElementById("closePopup").onclick = () => {
        document.getElementById("addNotePopup").hidden = true;
    }

    document.getElementById("addNoteConfirm").onclick = () => {
        var from = document.getElementById("fromInput").value;
        var note = document.getElementById("noteInput").value;

        if(from.length === 0 || note.length === 0) {
            alert("Vous n'avez pas remplis tout les champs");
        } else {
            var toSend = {"id": <%= data.users[0].id %>, "from": from, "note": note, "date": Date.now()}
            console.log(toSend);

            var req = new XMLHttpRequest();
            req.onreadystatechange = function () {
                document.getElementById("addNotePopup").hidden = true;
                location.reload();
            }
            req.open("POST", "/addnote?"+JSON.stringify(toSend), true);
            req.send();
        }
    }

    //////////////////////////////////////////// ALERTS //////////////////////////////////////////////////////

    function refresh_OXYalerts (OXYalerts, PULSEalerts) {
         ////////////// OXYMETER /////////////
        var _max = 10;

        if (OXYalerts === null || OXYalerts === [] || typeof OXYalerts == "undefined") {
            console.log("pass");
        } else {
            var alertsDOM = document.getElementById("alerts-body");
            alertsDOM.innerHTML = "";

            if (OXYalerts.length > 10) {
                _max = 10;
            } else {
                _max = OXYalerts.length;
            }

            for (var i = 0; i < _max; i += 1) {
                var e = OXYalerts[i]
                // console.log(e);
                var tr = document.createElement("tr");

                var th_type = document.createElement("th");
                th_type.innerText = "Sp02"

                var date = new Date(e.date);
                var th_date = document.createElement("th");
                th_date.innerText = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()} @ ${date.getHours()}:${date.getMinutes()}`;
                var th_gravite = document.createElement("th");
                var abort = false;
                switch (e.level) {
                    case 0:
                        abort = <%= settings["showGreen"] %>;
                        th_gravite.innerText = "Normal"
                        tr.style.backgroundColor = colors.normal;
                        //console.log("Abort");
                        break;
                    case 1:
                        th_gravite.innerText = "Warning"
                        tr.style.backgroundColor = colors.warning;
                        break;
                    case 2:
                        th_gravite.innerText = "Problem"
                        tr.style.backgroundColor = colors.problem;
                        break;
                    case 3:
                        th_gravite.innerText = "Critical"
                        tr.style.backgroundColor = colors.critical;
                        break;
                    case 4:
                        th_gravite.innerText = "Unknown"
                        tr.style.backgroundColor = colors.unknown;
                        break;
                }

                if (!abort) {
                    tr.appendChild(th_type);
                    tr.appendChild(th_date);
                    tr.appendChild(th_gravite);
                    alertsDOM.appendChild(tr);
                }
            }
        }

        var toFill = 10 - _max;

        if (toFill !== 0) {
            for (i = 0; i < toFill; i += 1) {
                tr = document.createElement("tr");

                var th = document.createElement("th");
                th.style.height = "20px";
                tr.appendChild(th);

                alertsDOM.appendChild(tr);
            }
        }

        ////////////// PULSE /////////////

        _max = 5;

        if (PULSEalerts === null || PULSEalerts === [] || typeof PULSEalerts == "undefined") {
            console.log("pass");
        } else {
            var alertsDOM = document.getElementById("alerts-body");

            if (PULSEalerts.length > 5) {
                _max = 5;
            } else {
                _max = PULSEalerts.length;
            }

            for (var i = 0; i < _max; i += 1) {
                var e = PULSEalerts[i]
                // console.log(e);
                var tr = document.createElement("tr");

                var th_type = document.createElement("th");
                th_type.innerText = "BPM"

                var date = new Date(e.date);
                var th_date = document.createElement("th");
                th_date.innerText = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()} @ ${date.getHours()}:${date.getMinutes()}`;
                var th_gravite = document.createElement("th");
                var abort = false;
                switch (e.level) {
                    case 0:
                        abort = <%= settings["showGreen"] %>;
                    <% console.log(settings) %>
                        th_gravite.innerText = "Normal"
                        tr.style.backgroundColor = colors.normal;
                        //console.log("Abort");
                        break;
                    case 1:
                        th_gravite.innerText = "Warning"
                        tr.style.backgroundColor = colors.warning;
                        break;
                    case 2:
                        th_gravite.innerText = "Problem"
                        tr.style.backgroundColor = colors.problem;
                        break;
                    case 3:
                        th_gravite.innerText = "Critical"
                        tr.style.backgroundColor = colors.critical;
                        break;
                    case 4:
                        th_gravite.innerText = "Unknown"
                        tr.style.backgroundColor = colors.unknown;
                        break;
                }

                if (!abort) {
                    tr.appendChild(th_type);
                    tr.appendChild(th_date);
                    tr.appendChild(th_gravite);
                    alertsDOM.appendChild(tr);
                }
            }
        }

        toFill = 5 - _max;

        if (toFill !== 0) {
            for (i = 0; i < toFill; i += 1) {
                tr = document.createElement("tr");

                var th = document.createElement("th");
                th.style.height = "20px";
                tr.appendChild(th);

                alertsDOM.appendChild(tr);
            }
        }
    }

    refresh_OXYalerts(<%- JSON.stringify(data.alerts) %>); // EJS GENERATED

    //////////////////////////////////////////// NOTES //////////////////////////////////////////////////////

    function refresh_notes (messages) {
        var messageDOM = document.getElementById("message-body")
        messageDOM.innerHTML = "<tr>\n" +
            "                        <th>Date</th>\n" +
            "                        <th>Note</th>\n" +
            "                        <th>Emmeteur</th>\n" +
            "                    </tr>"

        var background = false;

        messages.forEach(m => {
            tr = document.createElement("tr");

            var date = new Date(m.date)
            var th_date = document.createElement("th");
            th_date.innerText = `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()} @ ${date.getHours()}:${date.getMinutes()}`;

            var th_message = document.createElement("th");
            th_message.innerText = m.note;
            th_message.style.width = "70%";

            var th_from = document.createElement("th");
            th_from.innerText = m.from;

            tr.appendChild(th_date);
            tr.appendChild(th_message);
            tr.appendChild(th_from);

            if (background) {
                tr.style.backgroundColor = colors.background1;
            } else {
                tr.style.backgroundColor = colors.background2;
            }

            background = !background;

            messageDOM.appendChild(tr)
        })
    }

    refresh_notes(<%- JSON.stringify(data.notes) %>); // EJS GENERATED

    //////////////////////////////////////////// GRAPH //////////////////////////////////////////////////////

    var ctx = document.getElementById('chart').getContext('2d');

    var chart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                    label: 'SPO2 (%)',
                    yAxisID: "SpO2",
                    data: [],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                    ],
                    borderWidth: 1
                },
                {
                    label: "BPM",
                    yAxisID: "BPM",
                    data: [],
                    backgroundColor: [
                        'rgba(131,195,224,0.51)'
                    ],
                    borderColor: [
                        'rgba(131,195,224,0.94)'
                    ],
                    borderWidth: 1
                }]
        },
        options: {
            scales: {
                yAxes: [{
                        id: "SpO2",
                        ticks: {
                            beginAtZero: false
                        },
                        type: 'linear',
                        position: "left"
                    },
                    {
                        id: "BPM",
                        ticks: {
                            beginAtZero: false
                        },
                        type: 'linear',
                        position: 'right'
                    }]
            },
            animation: {
                duration: 0
            },
            responsive: true,
            maintainAspectRatio: false,
            responsiveAnimationDuration: 0,
            aspectRatio: 1
        }
    });

    document.getElementById("size").oninput = function () {
        // console.log(this.value)
        setGraphTime(this.value)
    }

    var rawdata = {};
    rawdata.oxymeter = <%- JSON.stringify(data.oxymeter) %>;
    rawdata.pulse = <%- JSON.stringify(data.pulse) %>;
    var lastgraphID = 0;

    function setGraphTime (_var) {
        var val = parseInt(_var);
        lastgraphID = val;
        // console.log("Asked : "+val)
        //console.log("Before : " + rawdata.length.toString());
        var cctr = [];
        var pulse = [];
        var lbl = [];

        var data = {};

        data.oxymeter = JSON.parse(JSON.stringify(rawdata.oxymeter));
        data.pulse = JSON.parse(JSON.stringify(rawdata.pulse));

        // console.log(data.length.toString());
        data.oxymeter.splice(<%= nbase%>+val, data.length-val);
        data.oxymeter.splice(0, val);
        data.pulse.splice(<%= nbase%>+val, data.length-val);
        data.pulse.splice(0, val);
        //console.log("After : " + rawdata.length.toString());
        data.oxymeter.forEach( e => {
            cctr.push(e.concentration);
            var date = new Date(e.date);
            lbl.push(`${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()} @ ${date.getHours()}:${date.getMinutes()}`)
        });
        data.pulse.forEach( e => {
            pulse.push(e.pulsation);
        })
        chart.data.labels = lbl;
        chart.data.datasets[0].data = cctr;
        chart.data.datasets[1].data = pulse;
        chart.update();
    }

    setGraphTime(0);

    function refresh_graph(oxymeter, pulse) {
        if(lastgraphID === 0) {
            setGraphTime(lastgraphID);
            rawdata.oxymeter = oxymeter;
            rawdata.pulse = pulse;
        }
    }

    //////////////////////////////////////////// EDIT USER ////////////////////////////////////////////////////

    document.getElementById("settings").onclick = () => {
        console.log("settings");
        document.getElementById("modifyUser").hidden = false;
    }

    document.getElementById("muclosePopup").onclick = () => {
        initSettings();
        document.getElementById("modifyUser").hidden = true;
    };

    var alertsDisable = [];

    document.getElementById("modifyConfirm").onclick = () => {
        if(alertsDisable.length === 0) {
            var changes = "";

            var values = Array.from(document.getElementsByClassName("settingsValue"))

            var itid = 1;

            values.forEach(e => {
                var buff = `${e.name}=${e.value}`;
                if (itid < values.length) {
                    buff += "&"
                }
                itid += 1;
                changes += buff
            })

            var req = new XMLHttpRequest();
            req.onreadystatechange = function () {
                location.reload();
            }
            req.open("POST", "/user?id=" + json.users[0].id + "&" + changes, true);
            req.send();
        } else {
            alert("Veuillez vérifier vos données")
        }
    }

    var alertConfig = {"oxy": {}, "pulse": {}};

    function initSettings() {
        document.getElementById("muNomInput").value = json.users[0].name;
        document.getElementById("muChambreInput").value = json.users[0].chambre;

        json.alertsConfig.forEach( config => {
            switch(config.category) {
                case 1:
                    alertConfig.oxy[config.id] = config;
                    break;
                case 2:
                    alertConfig.pulse[config.id] = config;
                    break;
            }
        });

        document.getElementById("muOXYalertInput").onchange = () => {
            var error = true
            try {
                document.getElementById("muOXYprofileName").innerText = "Nom du profil : " + alertConfig.oxy[parseInt(document.getElementById("muOXYalertInput").value)].name;
                error = false;
            } catch (e) {
                document.getElementById("muOXYprofileName").innerText = "Ce profil n'existe pas"
            }

            if(error) {
                if(!alertsDisable.includes("muOXYalert")) {
                    alertsDisable.push("muOXYalert")
                }
            } else {
                if(alertsDisable.includes("muOXYalert")) {
                    alertsDisable.splice(alertsDisable.indexOf("muOXYalert"), 1);
                }
            }
        }

        document.getElementById("muPULSEalertInput").onchange = () => {
            var error = true;
            try {
                document.getElementById("muPULSEprofileName").innerText = "Nom du profil : " + alertConfig.oxy[parseInt(document.getElementById("muPULSEalertInput").value)].name;
                error = false;
            } catch (e) {
                document.getElementById("muPULSEprofileName").innerText = "Ce profil n'existe pas"
            }

            if(error) {
                if(!alertsDisable.includes("muPULSEalert")) {
                    alertsDisable.push("muPULSEalert")
                }
            } else {
                if(alertsDisable.includes("muPULSEalert")) {
                    alertsDisable.splice(alertsDisable.indexOf("muPULSEalert"), 1);
                }
            }
        }

        document.getElementById("muOXYalertInput").value = json.users[0]["oxy-alert"];
        document.getElementById("muOXYalertInput").onchange();
        document.getElementById("muPULSEalertInput").value = json.users[0]["pulse-alert"];
        document.getElementById("muPULSEalertInput").onchange();
    }

    //////////////////////////////////////////// REFRESH ////////////////////////////////////////////////////

    var json = {};
    var fTime = 0;

    function refresh_all() {
        setTimeout(refresh_all, <%= refresh_rate %>);

        var req = new XMLHttpRequest();
        req.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                json = JSON.parse(this.responseText)
                // console.log(json.OXYalerts);
                refresh_OXYalerts(json.OXYalerts, json.PULSEalerts);
                refresh_notes(json.notes);
                refresh_graph(json.oxymeter, json.pulse);
                //console.log(json);
                // console.info("refreshed");
                if(fTime < 2) {
                    initSettings();
                }
                fTime += 1;
            }
        }
        req.open("POST", "/patient?"+<%= data.users[0].id%>, true);
        req.send();
    }

    refresh_all();
</script>